
/*
   The ATECC508A Data zone consists of 1208 bytes split into 16 slots of varying sizes.
   Each slot access restrictions are individually programmable and can be used to store
   secret key, calibration data, model number, or other information related to the item
   to which the crypto device is attached. Additionally, ATECC508A slots can be used to
   store Private Key, Public Key, Certificate, and/or Signature. While all slots can be
   used to store Private Key or User Data, only Slots 8 thru 15 are large enough to store
   an ECC Public Key or ECDSA Certificate/Signature.
   To be used for Asymmetric Authentication, the ATECC508A support internal generation
   of Private and Public Key pair via GenKey command. If the Private and Public Key pair
   is externally generated, the Private Key can also be stored using PrivWrite Command.
   Other data aside from the Private Key can be stored using Write command.
*/

static const uint8_t config_zone[]  =
{
  /* 0-15 write only, not included, shown for reference
  0x01, 0x23, 0x00, 0x00, // 0-3 SN[0:3] RO
  0x00, 0x00, 0x00, 0x00, // 4-7 RevNum RO
  0x00, 0x00, 0x00, 0x00, 0xEE, // 8-12 SN[4:8]
  0xC0, // 13 Reserved
  0xA7, // 14 I2C Enable
  0x00, // 15 Reserved
  */
  0xC0, // 16 I2C Address
  0x00, // 17 Reserved
  0xAA, // 18 OTP Mode
  0x00, // 19 Chip Mode

  // bit 0 - bit 3 equals Readykey -> 1
  // bit 4 equals CheckOnly/NoMac -> 0
  // bit 5 equals LimitedUse -> 0
  // bit 6 equals EncryptedRead -> 0
  // bit 7 equals IsSecret -> 1
  // bit - bit 15: of no relevance in this case

  /*
    This way the keyslots get configured in a way that the crypto chip
    doesn't come pre-provisioned. Instead the GenKey command can be used
    to create ECC secret keys within the slots as long as the slots don't
    get locked. This way the users stay in control of provisioning and
    certificate production/ release.
  /*

  // 2 bytes slot configuration: odd bytes is MSBytes and even bytes are LSBytes
  // 0x81 -> 1000 0001 ;  0xA0 -> 1010 0000
  0x81, 0xA0, // 20-21 SlotConfig 0, External Sig, Is Secret, Never write, GenKey can write random keys
  0x81, 0xA0, // 22-23 SlotConfig 1
  0x81, 0xA0, // 24-25 SlotConfig 2
  0x81, 0xA0, // 26-27 SlotConfig 3
  0x81, 0xA0, // 28-29 SlotConfig 4
  0x81, 0xA0, // 30-31 SlotConfig 5
  0x81, 0xA0, // 32-33 SlotConfig 6
  0x81, 0xA0, // 34-35 SlotConfig 7
  0x81, 0xA0, // 36-37 SlotConfig 8
  0x81, 0xA0, // 38-39 SlotConfig 9
  0x81, 0xA0, // 40-41 SlotConfig 10
  0x81, 0xA0, // 42-43 SlotConfig 11
  0x81, 0xA0, // 44-45 SlotConfig 12
  0x81, 0xA0, // 46-47 SlotConfig 13
  0x81, 0xA0, // 48-49 SlotConfig 14
  0x81, 0xA0, // 50-51 SlotConfig 15

  // UseFlag. defines how often the key within a key slot can be used.
  // 0x00 means no limit.
  // ATECC508A
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 52-59 Counter[0]
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 60-67 Counter[1]

  // LastKey. LastKeyUse works like UseFlag.But only for key slot 15
  // 0xFF is the default value. The amount of the times the key 15 can
  // be used can be limited to 128 or less times.
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // 68-83 Last KeyUse

  // UserExtra and Selector belong together. Selector defines which chip
  // will stay in active mode after execution pause command. The number
  // of the chip to be kept active is written into UserExtra
  0x00, // 84 UserExtra
  0x09, // 85 Selector. Its default value is 0x00
  // Set to non zero value to be not changeable in the future.

  0x00, // 86 LockValue
  0x00, // 87 LockConfig
  0xFF, 0xFF, // 88-89 SlotLocked
  0x00, 0x00, // 90-91 RFU
  0x00, 0x00, 0x00, 0x00, // 92-95 X509format - relevant for storage of certificates

  // KeyConfig slot 0, Private, can generate Public key, P256 NIST ECC key, Lockable,
  // Random nonce Not required, No prior auth required
  // The 16 KeyConfig elements are used in addition to SlotConfig to restrict the actions
  // that can be performed using information stored in a particular slot.
  // The KeyConfig element is interpreted according to the table below when the
  // Data zone is locked.
  // 0x33 0x00 -> 0011 0011 0000 0000
  0x33, 0x00, //  96-97 KeyConfig slot 0
  0x33, 0x00, //  98-99  KeyConfig slot 1
  0x33, 0x00, // 100-101 KeyConfig slot 2
  0x33, 0x00, // 102-103 KeyConfig slot 3
  0x33, 0x00, // 104-105 KeyConfig slot 4
  0x33, 0x00, // 106-107 KeyConfig slot 5
  0x33, 0x00, // 108-109 KeyConfig slot 6
  0x33, 0x00, // 110-111 KeyConfig slot 7
  // 0x3C 0x00 -> 0011 1100 0000 0000
  0x3C, 0x00, // 112-113 KeyConfig slot 8, Non ECC keys, allows to store longer strings
  0x3C, 0x00, // 114-115 KeyConfig slot 9
  0x3C, 0x00, // 116-117 KeyConfig slot 10
  0x3C, 0x00, // 118-119 KeyConfig slot 11
  0x3C, 0x00, // 120-121 KeyConfig slot 12
  0x3C, 0x00, // 122-123 KeyConfig slot 13
  0x3C, 0x00, // 124-125 KeyConfig slot 14
  0x3C, 0x00  // 126-127 KeyConfig slot 15
};

/*
   OTP zone consists of 64 bytes of one-time programmable (OTP) bits.
   The OTP zones can be used to store fixed data such as, model numbers,
   calibration information, manufacturing history, or other data that should
   never change. These bytes can freely be written after the Configuration
   zone has been locked, but prior to Data/OTP zones locked.
*/
// OTP config data taken from Josh Datko and ThingInnovations
// accordingly encrypted text in OTP is
// CRYPTRONIX CRYPTOAUTH ARDUINO LIBRARY V: 0.2 ThingInnovations.
// Both libs defined the starting point of our own C++ crypto lib
// ;-)
static const uint8_t otp_zone[] =
{
  0x43, 0x52, 0x59, 0x50, 0x54, 0x52, 0x4f, 0x4e,
  0x49, 0x58, 0x20, 0x43, 0x52, 0x59, 0x50, 0x54,
  0x4f, 0x41, 0x55, 0x54, 0x48, 0x20, 0x41, 0x52,
  0x44, 0x55, 0x49, 0x4e, 0x4f, 0x20, 0x4c, 0x49,
  0x42, 0x52, 0x41, 0x52, 0x59, 0x20, 0x56, 0x3a,
  0x20, 0x30, 0x2e, 0x32, 0x20, 0x54, 0x68, 0x69,
  0x6e, 0x67, 0x49, 0x6e, 0x6e, 0x6f, 0x76, 0x61,
  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x00, 0x00
};
